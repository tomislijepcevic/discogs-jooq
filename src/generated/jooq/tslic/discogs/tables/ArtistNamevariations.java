/*
 * This file is generated by jOOQ.
 */
package tslic.discogs.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tslic.discogs.Discogs;
import tslic.discogs.Indexes;
import tslic.discogs.Keys;
import tslic.discogs.tables.records.ArtistNamevariationsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtistNamevariations extends TableImpl<ArtistNamevariationsRecord> {

    private static final long serialVersionUID = -612495146;

    /**
     * The reference instance of <code>discogs.artist_namevariations</code>
     */
    public static final ArtistNamevariations ARTIST_NAMEVARIATIONS = new ArtistNamevariations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtistNamevariationsRecord> getRecordType() {
        return ArtistNamevariationsRecord.class;
    }

    /**
     * The column <code>discogs.artist_namevariations.artist_id</code>.
     */
    public final TableField<ArtistNamevariationsRecord, Integer> ARTIST_ID = createField("artist_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.artist_namevariations.ofst</code>.
     */
    public final TableField<ArtistNamevariationsRecord, Integer> OFST = createField("ofst", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.artist_namevariations.namevariation</code>.
     */
    public final TableField<ArtistNamevariationsRecord, String> NAMEVARIATION = createField("namevariation", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>discogs.artist_namevariations</code> table reference
     */
    public ArtistNamevariations() {
        this(DSL.name("artist_namevariations"), null);
    }

    /**
     * Create an aliased <code>discogs.artist_namevariations</code> table reference
     */
    public ArtistNamevariations(String alias) {
        this(DSL.name(alias), ARTIST_NAMEVARIATIONS);
    }

    /**
     * Create an aliased <code>discogs.artist_namevariations</code> table reference
     */
    public ArtistNamevariations(Name alias) {
        this(alias, ARTIST_NAMEVARIATIONS);
    }

    private ArtistNamevariations(Name alias, Table<ArtistNamevariationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtistNamevariations(Name alias, Table<ArtistNamevariationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ArtistNamevariations(Table<O> child, ForeignKey<O, ArtistNamevariationsRecord> key) {
        super(child, key, ARTIST_NAMEVARIATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Discogs.DISCOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTIST_NAMEVARIATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArtistNamevariationsRecord> getPrimaryKey() {
        return Keys.ARTIST_NAMEVARIATIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArtistNamevariationsRecord>> getKeys() {
        return Arrays.<UniqueKey<ArtistNamevariationsRecord>>asList(Keys.ARTIST_NAMEVARIATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ArtistNamevariationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArtistNamevariationsRecord, ?>>asList(Keys.ARTIST_NAMEVARIATIONS__ARTISTS_ID_FKEY);
    }

    public Artists artists() {
        return new Artists(this, Keys.ARTIST_NAMEVARIATIONS__ARTISTS_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArtistNamevariations as(String alias) {
        return new ArtistNamevariations(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArtistNamevariations as(Name alias) {
        return new ArtistNamevariations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistNamevariations rename(String name) {
        return new ArtistNamevariations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistNamevariations rename(Name name) {
        return new ArtistNamevariations(name, null);
    }
}
