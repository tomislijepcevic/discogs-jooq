/*
 * This file is generated by jOOQ.
 */
package tslic.discogs.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tslic.discogs.Discogs;
import tslic.discogs.Indexes;
import tslic.discogs.Keys;
import tslic.discogs.tables.records.ArtistMembersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtistMembers extends TableImpl<ArtistMembersRecord> {

    private static final long serialVersionUID = 830017666;

    /**
     * The reference instance of <code>discogs.artist_members</code>
     */
    public static final ArtistMembers ARTIST_MEMBERS = new ArtistMembers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtistMembersRecord> getRecordType() {
        return ArtistMembersRecord.class;
    }

    /**
     * The column <code>discogs.artist_members.artist_id</code>.
     */
    public final TableField<ArtistMembersRecord, Integer> ARTIST_ID = createField("artist_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.artist_members.ofst</code>.
     */
    public final TableField<ArtistMembersRecord, Integer> OFST = createField("ofst", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.artist_members.artist2_id</code>.
     */
    public final TableField<ArtistMembersRecord, Integer> ARTIST2_ID = createField("artist2_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>discogs.artist_members.name</code>.
     */
    public final TableField<ArtistMembersRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>discogs.artist_members</code> table reference
     */
    public ArtistMembers() {
        this(DSL.name("artist_members"), null);
    }

    /**
     * Create an aliased <code>discogs.artist_members</code> table reference
     */
    public ArtistMembers(String alias) {
        this(DSL.name(alias), ARTIST_MEMBERS);
    }

    /**
     * Create an aliased <code>discogs.artist_members</code> table reference
     */
    public ArtistMembers(Name alias) {
        this(alias, ARTIST_MEMBERS);
    }

    private ArtistMembers(Name alias, Table<ArtistMembersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtistMembers(Name alias, Table<ArtistMembersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ArtistMembers(Table<O> child, ForeignKey<O, ArtistMembersRecord> key) {
        super(child, key, ARTIST_MEMBERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Discogs.DISCOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTIST_MEMBERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArtistMembersRecord> getPrimaryKey() {
        return Keys.ARTIST_MEMBERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArtistMembersRecord>> getKeys() {
        return Arrays.<UniqueKey<ArtistMembersRecord>>asList(Keys.ARTIST_MEMBERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ArtistMembersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArtistMembersRecord, ?>>asList(Keys.ARTIST_MEMBERS__ARTISTS_ID_FKEY);
    }

    public Artists artists() {
        return new Artists(this, Keys.ARTIST_MEMBERS__ARTISTS_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArtistMembers as(String alias) {
        return new ArtistMembers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArtistMembers as(Name alias) {
        return new ArtistMembers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistMembers rename(String name) {
        return new ArtistMembers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistMembers rename(Name name) {
        return new ArtistMembers(name, null);
    }
}
