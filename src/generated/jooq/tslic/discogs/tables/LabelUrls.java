/*
 * This file is generated by jOOQ.
 */
package tslic.discogs.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tslic.discogs.Discogs;
import tslic.discogs.Indexes;
import tslic.discogs.Keys;
import tslic.discogs.tables.records.LabelUrlsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabelUrls extends TableImpl<LabelUrlsRecord> {

    private static final long serialVersionUID = 80917789;

    /**
     * The reference instance of <code>discogs.label_urls</code>
     */
    public static final LabelUrls LABEL_URLS = new LabelUrls();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabelUrlsRecord> getRecordType() {
        return LabelUrlsRecord.class;
    }

    /**
     * The column <code>discogs.label_urls.label_id</code>.
     */
    public final TableField<LabelUrlsRecord, Integer> LABEL_ID = createField("label_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.label_urls.ofst</code>.
     */
    public final TableField<LabelUrlsRecord, Integer> OFST = createField("ofst", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.label_urls.url</code>.
     */
    public final TableField<LabelUrlsRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>discogs.label_urls</code> table reference
     */
    public LabelUrls() {
        this(DSL.name("label_urls"), null);
    }

    /**
     * Create an aliased <code>discogs.label_urls</code> table reference
     */
    public LabelUrls(String alias) {
        this(DSL.name(alias), LABEL_URLS);
    }

    /**
     * Create an aliased <code>discogs.label_urls</code> table reference
     */
    public LabelUrls(Name alias) {
        this(alias, LABEL_URLS);
    }

    private LabelUrls(Name alias, Table<LabelUrlsRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabelUrls(Name alias, Table<LabelUrlsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> LabelUrls(Table<O> child, ForeignKey<O, LabelUrlsRecord> key) {
        super(child, key, LABEL_URLS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Discogs.DISCOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LABEL_URLS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LabelUrlsRecord> getPrimaryKey() {
        return Keys.LABEL_URLS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LabelUrlsRecord>> getKeys() {
        return Arrays.<UniqueKey<LabelUrlsRecord>>asList(Keys.LABEL_URLS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LabelUrlsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabelUrlsRecord, ?>>asList(Keys.LABEL_URLS__LABEL_ID_FKEY);
    }

    public Labels labels() {
        return new Labels(this, Keys.LABEL_URLS__LABEL_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabelUrls as(String alias) {
        return new LabelUrls(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabelUrls as(Name alias) {
        return new LabelUrls(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabelUrls rename(String name) {
        return new LabelUrls(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabelUrls rename(Name name) {
        return new LabelUrls(name, null);
    }
}
