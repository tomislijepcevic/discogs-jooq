/*
 * This file is generated by jOOQ.
 */
package tslic.discogs.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tslic.discogs.Discogs;
import tslic.discogs.Indexes;
import tslic.discogs.Keys;
import tslic.discogs.tables.records.TracksRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tracks extends TableImpl<TracksRecord> {

    private static final long serialVersionUID = -666326677;

    /**
     * The reference instance of <code>discogs.tracks</code>
     */
    public static final Tracks TRACKS = new Tracks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TracksRecord> getRecordType() {
        return TracksRecord.class;
    }

    /**
     * The column <code>discogs.tracks.release_id</code>.
     */
    public final TableField<TracksRecord, Integer> RELEASE_ID = createField("release_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.tracks.ofst</code>.
     */
    public final TableField<TracksRecord, Integer> OFST = createField("ofst", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.tracks.title</code>.
     */
    public final TableField<TracksRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>discogs.tracks.duration</code>.
     */
    public final TableField<TracksRecord, String> DURATION = createField("duration", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>discogs.tracks.position</code>.
     */
    public final TableField<TracksRecord, String> POSITION = createField("position", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>discogs.tracks</code> table reference
     */
    public Tracks() {
        this(DSL.name("tracks"), null);
    }

    /**
     * Create an aliased <code>discogs.tracks</code> table reference
     */
    public Tracks(String alias) {
        this(DSL.name(alias), TRACKS);
    }

    /**
     * Create an aliased <code>discogs.tracks</code> table reference
     */
    public Tracks(Name alias) {
        this(alias, TRACKS);
    }

    private Tracks(Name alias, Table<TracksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tracks(Name alias, Table<TracksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tracks(Table<O> child, ForeignKey<O, TracksRecord> key) {
        super(child, key, TRACKS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Discogs.DISCOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRACKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TracksRecord> getPrimaryKey() {
        return Keys.TRACKS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TracksRecord>> getKeys() {
        return Arrays.<UniqueKey<TracksRecord>>asList(Keys.TRACKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TracksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TracksRecord, ?>>asList(Keys.TRACKS__RELEASES_ID_FKEY);
    }

    public Releases releases() {
        return new Releases(this, Keys.TRACKS__RELEASES_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tracks as(String alias) {
        return new Tracks(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tracks as(Name alias) {
        return new Tracks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tracks rename(String name) {
        return new Tracks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tracks rename(Name name) {
        return new Tracks(name, null);
    }
}
