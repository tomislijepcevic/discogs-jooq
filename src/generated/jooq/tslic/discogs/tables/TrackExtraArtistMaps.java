/*
 * This file is generated by jOOQ.
 */
package tslic.discogs.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tslic.discogs.Discogs;
import tslic.discogs.Indexes;
import tslic.discogs.Keys;
import tslic.discogs.tables.records.TrackExtraArtistMapsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrackExtraArtistMaps extends TableImpl<TrackExtraArtistMapsRecord> {

    private static final long serialVersionUID = -1438159220;

    /**
     * The reference instance of <code>discogs.track_extra_artist_maps</code>
     */
    public static final TrackExtraArtistMaps TRACK_EXTRA_ARTIST_MAPS = new TrackExtraArtistMaps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrackExtraArtistMapsRecord> getRecordType() {
        return TrackExtraArtistMapsRecord.class;
    }

    /**
     * The column <code>discogs.track_extra_artist_maps.release_id</code>.
     */
    public final TableField<TrackExtraArtistMapsRecord, Integer> RELEASE_ID = createField("release_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.track_extra_artist_maps.track_ofst</code>.
     */
    public final TableField<TrackExtraArtistMapsRecord, Integer> TRACK_OFST = createField("track_ofst", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.track_extra_artist_maps.artist_ofst</code>.
     */
    public final TableField<TrackExtraArtistMapsRecord, Integer> ARTIST_OFST = createField("artist_ofst", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.track_extra_artist_maps.artist_id</code>.
     */
    public final TableField<TrackExtraArtistMapsRecord, Integer> ARTIST_ID = createField("artist_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>discogs.track_extra_artist_maps.anv</code>.
     */
    public final TableField<TrackExtraArtistMapsRecord, String> ANV = createField("anv", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>discogs.track_extra_artist_maps.join_relation</code>.
     */
    public final TableField<TrackExtraArtistMapsRecord, String> JOIN_RELATION = createField("join_relation", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>discogs.track_extra_artist_maps.name</code>.
     */
    public final TableField<TrackExtraArtistMapsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>discogs.track_extra_artist_maps.role</code>.
     */
    public final TableField<TrackExtraArtistMapsRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>discogs.track_extra_artist_maps</code> table reference
     */
    public TrackExtraArtistMaps() {
        this(DSL.name("track_extra_artist_maps"), null);
    }

    /**
     * Create an aliased <code>discogs.track_extra_artist_maps</code> table reference
     */
    public TrackExtraArtistMaps(String alias) {
        this(DSL.name(alias), TRACK_EXTRA_ARTIST_MAPS);
    }

    /**
     * Create an aliased <code>discogs.track_extra_artist_maps</code> table reference
     */
    public TrackExtraArtistMaps(Name alias) {
        this(alias, TRACK_EXTRA_ARTIST_MAPS);
    }

    private TrackExtraArtistMaps(Name alias, Table<TrackExtraArtistMapsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrackExtraArtistMaps(Name alias, Table<TrackExtraArtistMapsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrackExtraArtistMaps(Table<O> child, ForeignKey<O, TrackExtraArtistMapsRecord> key) {
        super(child, key, TRACK_EXTRA_ARTIST_MAPS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Discogs.DISCOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRACK_EXTRA_ARTIST_MAPS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TrackExtraArtistMapsRecord> getPrimaryKey() {
        return Keys.TRACK_EXTRA_ARTIST_MAPS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TrackExtraArtistMapsRecord>> getKeys() {
        return Arrays.<UniqueKey<TrackExtraArtistMapsRecord>>asList(Keys.TRACK_EXTRA_ARTIST_MAPS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TrackExtraArtistMapsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrackExtraArtistMapsRecord, ?>>asList(Keys.TRACK_EXTRA_ARTIST_MAPS__TRACKS_ID_FKEY);
    }

    public Tracks tracks() {
        return new Tracks(this, Keys.TRACK_EXTRA_ARTIST_MAPS__TRACKS_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TrackExtraArtistMaps as(String alias) {
        return new TrackExtraArtistMaps(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TrackExtraArtistMaps as(Name alias) {
        return new TrackExtraArtistMaps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackExtraArtistMaps rename(String name) {
        return new TrackExtraArtistMaps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackExtraArtistMaps rename(Name name) {
        return new TrackExtraArtistMaps(name, null);
    }
}
